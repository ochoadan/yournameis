datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String        @id @default(cuid())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @default(now()) @updatedAt
  name                  String?
  email                 String?       @unique
  emailVerified         DateTime?
  image                 String?
  stripeCustomerId      String?       @unique
  isActive              Boolean       @default(false)
  addressesCount        Int           @default(0)
  allowedAddressesCount Int           @default(0)
  isAllowedToSignIn     Boolean       @default(true)
  isAdmin               Boolean       @default(false)
  accounts              Account[]
  sessions              Session[]
  EmailRoutes           EmailRoutes[]

  @@index([email])
}

model EmailRoutes {
  id              String   @id
  active          Boolean  @default(true)
  fromEmail       String   @unique
  toEmail         String
  description     String
  created_at      DateTime @default(now())
  createdById     String
  createdBy       User     @relation(fields: [createdById], references: [id])
}

model Domains {
  id     Int    @id @default(autoincrement())
  domain String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model errorLog {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  createdBy String?
}
